import rclpy
from rclpy.node import Node
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Pose
from tf.transformations import euler_from_quaternion

class odomToPose(Node):
    def __init__(self):
        super().__init__('init_odom_node')
        self.declare_parameter('input_topic', 'gz_pose')
        self.declare_parameter('output_topic', 'rosbot_pose')
        self.input_topic_ = self.get_parameter('input_topic').value
        self.output_topic_ = self.get_parameter('output_topic').value
        self.init_x = self.get_parameter('initial_pose').value[0]
        self.init_y = self.get_parameter('initial_pose').value[1]
        self.init_theta = self.get_parameter('initial_pose').value[2]




dhfjkahdfasdhfadsiufuydrei
        self.get_logger().info('Subscribing to %s odom topic'%self.input_topic_)
        
        self.get_logger().info('Publishing to %s odometry topic'%self.output_topic_)
        self.odom_sub_ = self.create_subscription(Odometry,
                                                  self.input_topic_,
                                                  self.processOdometry, 10)
        self.odom_pub_ = self.create_publisher(Odometry, self.output_topic_, 10)

     
        rospy.init_node("conversion_node")
        sub_odom = rospy.Subscriber("odom", Odometry, self.odometryCallback_)
        self.pub_pose_ = rospy.Publisher("pose2d", Pose2D, queue_size = 1)
        
        rospy.spin()

    def odometryCallback_(self, msg):
        pose2d = Pose2D()
        pose2d.x = msg.pose.pose.position.x
        pose2d.y = msg.pose.pose.position.y

        quat = msg.pose.pose.orientation
        roll, pitch, yaw = euler_from_quaternion([quat.x, quat.y, quat.z, quat.w])
        pose2d.theta = yaw

        self.pub_pose_.publish(pose2d);

def main():
    try:
        o2p = odomToPose()
    except rospy.ROSInterruptException:
        pass
    
if __name__ == "__main__":
    main()
